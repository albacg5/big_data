/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.upc.dtim.bolster.ontomatchmerge.gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

import org.upc.dtim.bolster.ontomatchmerge.extraction.ioartifacts.IOArtifact;
import org.upc.dtim.bolster.ontomatchmerge.extraction.ioartifacts.RDBIOArtifact;
import org.upc.dtim.bolster.ontomatchmerge.extraction.ioartifacts.XMLIOArtifact;

/**
 *
 * @author Rizkallah
 */
public class NewSourceDialog extends javax.swing.JDialog {

    private MainJFrame parent;
    /**
     * Creates new form NewSourceDialog
     */
    public NewSourceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        centerWindow();

        this.parent = (MainJFrame)parent;
        
        // Add different source types supported. XML Source is the default.
        String[] sourceTypes = {"XML Source", "RDB Source"};
        sourceTypeComboBox.setModel(new DefaultComboBoxModel(sourceTypes));
        xmlSourcePanel.setVisible(true);
        rdbSourcePanel.setVisible(false);

        // Add different DB types
        String[] dbTypes = {"MySQL"};
        databaseTypeComboBox.setModel(new DefaultComboBoxModel(dbTypes));
    }
    
    private void centerWindow() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        xsdFileChooser = new javax.swing.JFileChooser();
        xmlFileChooser = new javax.swing.JFileChooser();
        newDataSourcePanel = new javax.swing.JPanel();
        sourceTypeComboBox = new javax.swing.JComboBox();
        sourceTypeLabel = new javax.swing.JLabel();
        xmlSourcePanel = new javax.swing.JPanel();
        xmlSchemaFileLabel = new javax.swing.JLabel();
        xmlInstanceFileLabel = new javax.swing.JLabel();
        xmlSchemaFileTextField = new javax.swing.JTextField();
        xmlInstanceFileTextField = new javax.swing.JTextField();
        xmlSchemaFileChooserButton = new javax.swing.JButton();
        xmlInstanceFileChooserButton = new javax.swing.JButton();
        rdbSourcePanel = new javax.swing.JPanel();
        databaseTypeLabel = new javax.swing.JLabel();
        databaseTypeComboBox = new javax.swing.JComboBox();
        databaseServerLabel = new javax.swing.JLabel();
        databaseNameLabel = new javax.swing.JLabel();
        databaseUsernameLabel = new javax.swing.JLabel();
        databasePasswordLabel = new javax.swing.JLabel();
        databaseServerTextField = new javax.swing.JTextField();
        databaseNameTextField = new javax.swing.JTextField();
        databaseUsernameTextField = new javax.swing.JTextField();
        databasePasswordTextField = new javax.swing.JTextField();
        addnewSourceDoneButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();

        xsdFileChooser.setDialogTitle("XML Schema File");
        xsdFileChooser.setFileFilter(new XSDFileFilter());

        xmlFileChooser.setDialogTitle("XML Instance File");
        xmlFileChooser.setFileFilter(new XMLFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Data Source");

        newDataSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Data Source"));

        sourceTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceTypeComboBoxActionPerformed(evt);
            }
        });

        sourceTypeLabel.setText("Source Type");

        xmlSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("XML Source"));

        xmlSchemaFileLabel.setText("XML Schema File");

        xmlInstanceFileLabel.setText("XML Instance File");

        xmlSchemaFileChooserButton.setText("...");
        xmlSchemaFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlSchemaFileChooserButtonActionPerformed(evt);
            }
        });

        xmlInstanceFileChooserButton.setText("...");
        xmlInstanceFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlInstanceFileChooserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout xmlSourcePanelLayout = new javax.swing.GroupLayout(xmlSourcePanel);
        xmlSourcePanel.setLayout(xmlSourcePanelLayout);
        xmlSourcePanelLayout.setHorizontalGroup(
            xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xmlSourcePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(xmlInstanceFileLabel)
                    .addComponent(xmlSchemaFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xmlSchemaFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(xmlInstanceFileTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xmlInstanceFileChooserButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xmlSchemaFileChooserButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        xmlSourcePanelLayout.setVerticalGroup(
            xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xmlSourcePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmlSchemaFileLabel)
                    .addComponent(xmlSchemaFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xmlSchemaFileChooserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(xmlSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmlInstanceFileLabel)
                    .addComponent(xmlInstanceFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xmlInstanceFileChooserButton))
                .addGap(8, 8, 8))
        );

        rdbSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RDB Source"));
        rdbSourcePanel.setPreferredSize(new java.awt.Dimension(314, 220));

        databaseTypeLabel.setText("Database Type");

        databaseServerLabel.setText("Database Server");

        databaseNameLabel.setText("Database Name");

        databaseUsernameLabel.setText("Username");

        databasePasswordLabel.setText("Password");

        javax.swing.GroupLayout rdbSourcePanelLayout = new javax.swing.GroupLayout(rdbSourcePanel);
        rdbSourcePanel.setLayout(rdbSourcePanelLayout);
        rdbSourcePanelLayout.setHorizontalGroup(
            rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rdbSourcePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(databasePasswordLabel)
                    .addComponent(databaseUsernameLabel)
                    .addComponent(databaseNameLabel)
                    .addComponent(databaseServerLabel)
                    .addComponent(databaseTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(databaseUsernameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 211, Short.MAX_VALUE)
                    .addComponent(databaseServerTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databasePasswordTextField))
                .addGap(8, 8, 8))
        );
        rdbSourcePanelLayout.setVerticalGroup(
            rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rdbSourcePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseTypeLabel)
                    .addComponent(databaseTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseServerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseNameLabel)
                    .addComponent(databaseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseUsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rdbSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databasePasswordLabel)
                    .addComponent(databasePasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        addnewSourceDoneButton.setText("Done");
        addnewSourceDoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewSourceDoneButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout newDataSourcePanelLayout = new javax.swing.GroupLayout(newDataSourcePanel);
        newDataSourcePanel.setLayout(newDataSourcePanelLayout);
        newDataSourcePanelLayout.setHorizontalGroup(
            newDataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDataSourcePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(sourceTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sourceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(newDataSourcePanelLayout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(addnewSourceDoneButton))
            .addComponent(xmlSourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rdbSourcePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
            .addGroup(newDataSourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        newDataSourcePanelLayout.setVerticalGroup(
            newDataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDataSourcePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(newDataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(xmlSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(addnewSourceDoneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newDataSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(newDataSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceTypeComboBoxActionPerformed
        Object selected = sourceTypeComboBox.getSelectedItem();
        if(selected.toString().equals("XML Source")) {
            xmlSourcePanel.setVisible(true);
            rdbSourcePanel.setVisible(false);
        }
        else if(selected.toString().equals("RDB Source")) {
            rdbSourcePanel.setVisible(true);
            xmlSourcePanel.setVisible(false);
        }
    }//GEN-LAST:event_sourceTypeComboBoxActionPerformed

    private void xmlSchemaFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlSchemaFileChooserButtonActionPerformed
        int returnVal = xsdFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            xmlSchemaFileTextField.setText(xsdFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_xmlSchemaFileChooserButtonActionPerformed

    private void xmlInstanceFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlInstanceFileChooserButtonActionPerformed
        int returnVal = xmlFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            xmlInstanceFileTextField.setText(xmlFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_xmlInstanceFileChooserButtonActionPerformed

    private void addnewSourceDoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewSourceDoneButtonActionPerformed
        errorMessageLabel.setText("");
        boolean newSourceCreated = false;
        IOArtifact newSource = null;
        // Create new source based on form info
        Object selected = sourceTypeComboBox.getSelectedItem();
        if(selected.toString().equals("XML Source")) {
            if (xmlSchemaFileTextField.getText().equals("")) {
                errorMessageLabel.setText("Choose XML Schema file (.xsd)");
            } else if (xmlInstanceFileTextField.getText().equals("")) {
                errorMessageLabel.setText("Choose XML Instance file (.xml)");
            } else {
                newSource = new XMLIOArtifact(xmlSchemaFileTextField.getText());
                ((XMLIOArtifact)newSource).addXmlInstancesPath(xmlInstanceFileTextField.getText());
                newSourceCreated = true;
            }
        }
        else if(selected.toString().equals("RDB Source")) {
            if (databaseServerTextField.getText().equals("")) {
                errorMessageLabel.setText("Field 'Database Server' cannot be empty");
            } else if (databaseNameTextField.getText().equals("")) {
                errorMessageLabel.setText("Field 'Database Name' cannot be empty");
            } else if (databaseUsernameTextField.getText().equals("")) {
                errorMessageLabel.setText("Field 'Username' cannot be empty");
            } else if (databasePasswordTextField.getText().equals("")) {
                errorMessageLabel.setText("Field 'Password' cannot be empty");
            } else {
                newSource = new RDBIOArtifact(databaseNameTextField.getText(),
                    databaseServerTextField.getText(),
                    databaseTypeComboBox.getSelectedItem().toString(),
                    databaseUsernameTextField.getText(),
                    databasePasswordTextField.getText());
                newSourceCreated = true;
            }
        }
        if (newSourceCreated) {
            parent.updateDataSourcesList(newSource);
            dispose();
        }
    }//GEN-LAST:event_addnewSourceDoneButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewSourceDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewSourceDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewSourceDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewSourceDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewSourceDialog dialog = new NewSourceDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addnewSourceDoneButton;
    private javax.swing.JLabel databaseNameLabel;
    private javax.swing.JTextField databaseNameTextField;
    private javax.swing.JLabel databasePasswordLabel;
    private javax.swing.JTextField databasePasswordTextField;
    private javax.swing.JLabel databaseServerLabel;
    private javax.swing.JTextField databaseServerTextField;
    private javax.swing.JComboBox databaseTypeComboBox;
    private javax.swing.JLabel databaseTypeLabel;
    private javax.swing.JLabel databaseUsernameLabel;
    private javax.swing.JTextField databaseUsernameTextField;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JPanel newDataSourcePanel;
    private javax.swing.JPanel rdbSourcePanel;
    private javax.swing.JComboBox sourceTypeComboBox;
    private javax.swing.JLabel sourceTypeLabel;
    private javax.swing.JFileChooser xmlFileChooser;
    private javax.swing.JButton xmlInstanceFileChooserButton;
    private javax.swing.JButton xmlInstanceFileChooserButton1;
    private javax.swing.JLabel xmlInstanceFileLabel;
    private javax.swing.JLabel xmlInstanceFileLabel1;
    private javax.swing.JTextField xmlInstanceFileTextField;
    private javax.swing.JTextField xmlInstanceFileTextField1;
    private javax.swing.JButton xmlSchemaFileChooserButton;
    private javax.swing.JButton xmlSchemaFileChooserButton1;
    private javax.swing.JLabel xmlSchemaFileLabel;
    private javax.swing.JLabel xmlSchemaFileLabel1;
    private javax.swing.JTextField xmlSchemaFileTextField;
    private javax.swing.JTextField xmlSchemaFileTextField1;
    private javax.swing.JPanel xmlSourcePanel;
    private javax.swing.JPanel xmlSourcePanel1;
    private javax.swing.JFileChooser xsdFileChooser;
    // End of variables declaration//GEN-END:variables
}

class XSDFileFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".xsd");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "XML Schema Files (*.xsd)";
    }
}

class XMLFileFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".xml");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "XML Instance Files (*.xml)";
    }
}
