/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'snadal' at '11/10/16 10:22 AM' with Gradle 2.10
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'jetty'

jettyRun {
    contextPath = "metadataStorage"
    httpPort = 8081
    reload = "automatic"
    scanIntervalSeconds = 1
}

war {
    archiveName 'metadataStorage.war'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-snapshot'
            name = 'maven-supersede-snapshot'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-release'
            name = 'maven-supersede-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
    add buildscript.repositories.getByName ("maven-supersede-snapshot")
    add buildscript.repositories.getByName ("maven-supersede-release")
}

configurations {
    providedRuntime
    //Avoids conflict: SL4J Multiple bindings were found on the class path
    //exclude group: "org.slf4j", module: "slf4j-log4j12"
    // check for updates every build
    //resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    //resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

jar {
    baseName = 'eu.supersede.mdm.storage'
    version = '0.0.1-SNAPSHOT'
}

war{
    baseName = 'eu.supersede.mdm.storage'
    version = '0.0.1-SNAPSHOT'
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Jersey for the REST APIs
    compile 'org.glassfish.jersey:jersey-bom:2.24.1'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.24.1'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.24.1'
    compile 'javax.ws.rs:javax.ws.rs-api:2.1-m01'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'


    compile 'org.glassfish.jersey.core:jersey-server:2.24.1'
    // Jersey core Servlet 3.x implementation
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.24.1'


    compile 'com.google.guava:guava:20.0'
    compile 'org.mongodb:mongo-java-driver:3.4.0-rc1'
    compile 'net.minidev:json-smart:2.2.1'
    compile 'org.apache.jena:apache-jena-libs:3.1.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.scala-lang:scala-library:2.12.0'
    compile 'org.apache.kafka:kafka-clients:0.10.1.0'
    compile 'org.jgrapht:jgrapht-core:1.0.0'

    compile("eu.supersede.feedbackanalysis:FeedbackAnalysis:0.1.0-SNAPSHOT"){
        changing=true
        exclude (group: 'xml-apis')
    }

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:3.8.2'
}
